buffer = [
	"alloc(size[, fill[, encoding]])",
	"allocUnsafe(size)",
	"allocUnsafeSlow(size)",
	"byteLength(string[, encoding])",
	"compare(buf1, buf2)",
	"concat(list[, totalLength])",
	"from(array)",
	"from(arrayBuffer[, byteOffset[, length]])",
	"from(buffer)",
	"from(string[, encoding])",
	"from(object[, offsetOrEncoding[, length]])",
	"isBuffer(obj)",
	"isEncoding(encoding)"
]

objects_buffer = [
	"buffer",
	"compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])",
	"copy(target[, targetStart[, sourceStart[, sourceEnd]]])",
	"entries()",
	"equals(otherBuffer)",
	"fill(value[, offset[, end]][, encoding])",
	"includes(value[, byteOffset][, encoding])",
	"indexOf(value[, byteOffset][, encoding])",
	"keys()",
	"lastIndexOf(value[, byteOffset][, encoding])",
	"length",
	"readDoubleBE(offset[, noAssert])",
	"readDoubleLE(offset[, noAssert])",
	"readFloatBE(offset[, noAssert])",
	"readFloatLE(offset[, noAssert])",
	"readInt8(offset[, noAssert])",
	"readInt16BE(offset[, noAssert])",
	"readInt16LE(offset[, noAssert])",
	"readInt32BE(offset[, noAssert])",
	"readInt32LE(offset[, noAssert])",
	"readIntBE(offset, byteLength[, noAssert])",
	"readIntLE(offset, byteLength[, noAssert])",
	"readUInt8(offset[, noAssert])",
	"readUInt16BE(offset[, noAssert])",
	"readUInt16LE(offset[, noAssert])",
	"readUInt32BE(offset[, noAssert])",
	"readUInt32LE(offset[, noAssert])",
	"readUIntBE(offset, byteLength[, noAssert])",
	"readUIntLE(offset, byteLength[, noAssert])",
	"slice([start[, end]])",
	"swap16()",
	"swap32()",
	"swap64()",
	"toJSON()",
	"toString([encoding[, start[, end]]])",
	"values()",
	"write(string[, offset[, length]][, encoding])",
	"writeDoubleBE(value, offset[, noAssert])",
	"writeDoubleLE(value, offset[, noAssert])",
	"writeFloatBE(value, offset[, noAssert])",
	"writeFloatLE(value, offset[, noAssert])",
	"writeInt8(value, offset[, noAssert])",
	"writeInt16BE(value, offset[, noAssert])",
	"writeInt16LE(value, offset[, noAssert])",
	"writeInt32BE(value, offset[, noAssert])",
	"writeInt32LE(value, offset[, noAssert])",
	"writeIntBE(value, offset, byteLength[, noAssert])",
	"writeIntLE(value, offset, byteLength[, noAssert])",
	"writeUInt8(value, offset[, noAssert])",
	"writeUInt16BE(value, offset[, noAssert])",
	"writeUInt16LE(value, offset[, noAssert])",
	"writeUInt32BE(value, offset[, noAssert])",
	"writeUInt32LE(value, offset[, noAssert])",
	"writeUIntBE(value, offset, byteLength[, noAssert])",
	"writeUIntLE(value, offset, byteLength[, noAssert])"
]